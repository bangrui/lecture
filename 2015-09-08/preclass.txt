Pre-Class Questions:

Consider the following naive row-based N x N matmul (matrix multiplication):

for (i = 0; i < N; i++){
   for (j = 0; j < N; j++){
      tmp = 0
      for (k = 0; k < N; k++)
         tmp += A[i,k] * B[k,j]
   }
      C[i,j] = tmp
}

Suppose data is in double-precision floating point. We are interested in
estimating the memory-based arithmetic intensity (AI) of this code. The
memory-based AI is defined that (# flops) / (# bytes transferred between memory
and cache), and depends on the cache size. Suppose the cache uses a
least-recently-used (LRU) policy for deciding which data to flush when moving
something into an already-full cache.

1. Suppose 16N is significantly larger than the size of our L3 cache. What is
the memory-based AI of this code? (Hint: What is the memory-based AI of just the
innermost loop?)

Since you can not store either A or B in the cacth, everytime you go through the 
inner loop, you need one load from A and one load from B. Also, you need to do 
one addtion and one multiplication. Thus, the algorithmic intensity is 1.


2. Now suppose that the cache is substantially larger than 16N, but
substantially smaller than 8N^2. What is the AI now?

Since you can reuse A, everytime you go through the inner loop, you need one 
load from B. You need to do one addtion and one multiplication. 
Thus, the algorithmic intensity is 2.


3. Now suppose the cache is large enough to hold all of A, B, and C. What is the
AI now? (Hint: Writing to a byte of memory not already in the cache incurs two
memory transfers: one to move the data to the cache for writing, and one to move
the written data back to main memory.)

Since you can reuse A and B, thus you need to load A and B for 2*N^2 load. 
You need to do one addtion and one multiplication for N^2 times. 
Thus, the algorithmic intensity is N.


4. Cache overflowing. On my CPU (Intel i7-4700 HQ), L1, L2, and L3 caches are 32
KB, 256 KB, and 6 MB respectively. What is the largest problem size N that will
fit in each cache? What is the arithmetic intensity associated with each problem
size?

Here we will assume that we want to fit A, B and C all in the memory. So the 
algorithmic intensity is N, based on problem 3.

L1: sqrt(32KB / (8bytes * 3)) ~ 36.95
Thus, N should be less or equal to 36

L2: sqrt(256KB / (8bytes * 3)) ~ 104.5
Thus, N should be less or equal to 104

L3: sqrt(6MB / (8bytes * 3)) ~ 512
Thus, N should be less or equal to 512.

5. My CPU has 4 cores, each of which can do 8 fused multiply-adds per cycle, has
a clock rate of 2.4 GHz, and a memory bandwidth of 25.6 GB/s. At what arithmetic
intensity does my machine become CPU-bound?

AI = 2.4GHz * 4 * 8 / 25.6 = 3


6. So, for what size range for N will naive matmul be CPU-bound on my machine?

As stated in problem 1 and problem 2, when one row or one matrix can not fit
in the memory, the AI is 1 and 2, which is less than 3. So
when one row or one matrix can't fit in the memory, the AI is not bounded by the
CPU-bound. However, when the matrix is small, the theoritical AI is N, however, the
CPU-bound is 3. Thus, when all three matrix can be fitted into the memory, naive
matmul will be bounded by the CPU. Thus, if L1 is 32KB, then when 3 <= N <= 36, it
will be bounded by the CPU-bound.

7. So, what will a plot of Flops/sec vs N look like?

Will ask the professor in oh
