## Reading questions

1.  A given program spends 10% of its time in an initial startup
    phase, and then 90% of its time in work that can be easily
    parallelized.  Assuming a machine with homogeneous cores, plot the
    idealized speedup and parallel efficiency of the overall code
    according to Amdahl's law for up to 128 cores.  If you know how,
    you should use a script to produce this plot, with both the serial
    fraction and the maximum number of cores as parameters.

	See plot.py and ideal_plot.pdf.

2.  Suppose a particular program can be partitioned into perfectly
    independent tasks, each of which takes time tau.  Tasks are
    set up, scheduled, and communicated to p workers at a (serial)
    central server; this takes an overhead time alpha per task.
    What is the theoretically achievable throughput (tasks/time)?

	Suppose there are k tasks.
	time = k * alpha + tau
	Then tasts/time = 1 / alpha when k goes to infinity.

3.  Under what circumstances is it best to not tune?
	This can be found from this lecture note: 
	http://cornell-cs5220-f15.github.io/2015/08/10/performance.html

	The reasons are:
	1. Tuning takes human time. If the human time is more expensive than 
		the computation time saved, it’s not worth it.
	2. Performance is often in tension with maintainability, generality, 
		and other nice software design properties. If tuning for performance 
		means making a mess of the code base, it may not be worth it.
	3. Most codes have bottlenecks where the majority of the time is spent. 
		It doesn’t make sense to tune something that already takes little time.

4.  The class cluster consists of eight nodes and fifteen Xeon Phi
    accelerator boards.  Based on an online search for information on
    these systems, what do you think is the theoretical peak flop rate
    (double-precision floating point operations per second)?  Show how
    you computed this, and give URLs for where you got the parameters
    in your calculation.  (We will return to this question again after
    we cover some computer architecture.)

	Our class cluster has 15 XeonPhi 5110P boards. The peak for each board is:
	Intel Xeon Phi coprocessor 5110P: 16 FLOPS/clock x 60 cores x 1.053 GHz 
	= 1010.88 GF/s

	Reference: http://www.intel.com/content/www/us/en/benchmarks/server/xeon-phi/xeon-phi-theoretical-maximums.html

    
5.  What is the approximate theoretical peak flop rate for your own machine?
	
	My computer has 8 CPU and each of them is Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz
	and the turbo frequency is 4GHz. Each CPU also has 4 cores.
	The theoretical peak FLOP/s is given by:
	Number of Cores * Average Frequency * Operations Per Cycle
	= 8 * 4 * 4GHz * 4 = 512GFlop
