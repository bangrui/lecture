0.  How much time did you spend on this pre-class exercise, and when?

    1 hour after class.

1.  What are one or two points that you found least clear in the
    10/08 slide decks (including the narration)?

    I don't understand what are you trying to compare in the network model figures.

2.  Now that we are now basically a third of the way into the
    semester, and are (mostly) settled into the steady pace of things,
    I would appreciate your feedback on what is working well or poorly
    about the class.  Comments on things I can reasonably change are
    particularly useful -- venting about the cluster, for example, is
    understandable but doesn't help me that much in adjusting!

    It would be much better if you can spend more time illustrating some basic
    knowledge before you go to details of code. I can't follow you when you are 
    talking about MPI without any previous knowledge about it.

3.  The ring demo implements the protocol described in the particle
    systems slide deck from 9/15:

    http://cornell-cs5220-f15.github.io/slides/2015-09-15-particle.html#/11

    a) In your own words, describe what ring.c is doing.

    Suppose you have n processors, denote as p(i), for i = 1,2, ... n. 
    Each processor has its own information I(i) for i = 1,2, ... n. 
    At the beginning stages, p(i) will deal with the information I(i), 
    for i = 1, 2, 3. Then p(i) will pass the information to I((i - 1) % n). 
    After p(i) receives its original information I(i), the loop is finished.

    b) How might you modify the code to have the same computational
       pattern, but using non-blocking communication rather than
       MPI_Sendrecv?  Note that according to the MPI standard,
       one isn't supposed to read from a buffer that is being
       handled by a non-blocking send, so it is probably necessary
       to use three temporary buffers rather than the current two.

    You need 3 buffers, one for sending, one for computation and one for receiving.
    At the beginning of each stage, you copy your current information to sending
    buffer and start doing the computation. At the meantime, you start the sending
    and receviding.
